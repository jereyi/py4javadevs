topic,java,python,pythonNote,javaNote
Class Definition,"public class Car {
    private String brand;
    private String model;

    # Constructor
    public Car(String brand, String model) {
        this.brand = brand;
        this.model = model;
    }

    # Instance method
    public void displayInfo() {
        System.out.println(brand + "" "" + model);
    }

    # Static method
    public static void printClassName() {
        System.out.println(""car"");
    }
}
","class Car:
    # Constructor
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    # Instance method
    def display_info(self):
        print(f""{self.brand} {self.model}"")

    # Static method
    def print_class_name():
        print(""car"")
",,
Object instantiation,"Car myCar = new Car(""Toyota"", ""Camry"");
","my_car = Car(""Toyota"", ""Camry"")

",,
Accessing Attributes and Methods,"System.out.println(myCar.getBrand());  // Output: Toyota
myCar.displayInfo();  // Output: Toyota Camry","print(my_car.brand)      # Output: Toyota
my_car.display_info()    # Output: Toyota Camry",,
Creating New Object Properties,,my_car.miles = 1000,,"You can dynamically add attributes to a Python object simply by initializing them. The new attributes only apply to that instance of the object.

If you try to access an attribute without first initializing it, an error will occur."
Deleting Object Properties,,del my_car.brand,,
access modifiers,"public class MyClass {
    // Accessible from any other class
    public void publicMethod() {
        System.out.println(""This is a public method"");
    }

    // Accessible within the same package and in subclasses.
    protected void protectedMethod() {
        System.out.println(""This is a protected method"");
    }

   // Only accessible within the same class.
    private void privateMethod() {
        System.out.println(""This is a private method"");
    }
}

// Usage
MyClass obj = new MyClass();
obj.publicMethod();
obj.protectedMethod();
obj.privateMethod();  // This will cause a compilation error
","class MyClass:
    # Accessible from any other class
    def public_method(self):
        print(""This is a public method"")

    # Accessible with the same package and in subclasses
    def _protected_method(self):
        print(""This is a protected method"")

    # Only accessible within the same class.
    def __private_method(self):
        print(""This is a private method"")

# Usage
obj = MyClass()
obj.public_method()
obj._protected_method()
obj.__private_method()  # This will cause an AttributeError",,"In Python, access modifiers are indicated through naming conventions rather than explicit keywords. Unlike in Java, there was ways to circumvent access control in Python to access protected and private attributes by their names, but it is discouraged."
Method overloading,"public class MathOperations {
    public int add(int x, int y) {
        return x + y;
    }

    public int add(int x, int y, int z) {
        return x + y + z;
    }
}

// Usage
MathOperations mathObj = new MathOperations();
System.out.println(mathObj.add(2, 3));      // Output: 5
System.out.println(mathObj.add(2, 3, 4));   // Output: 9
","class MathOperations:
    def add(self, x, y):
        return x + y

    def add(self, x, y, z):
        return x + y + z

# Usage
math_obj = MathOperations()
print(math_obj.add(2, 3))        # ERROR!
print(math_obj.add(2, 3, 4))     # Output: 9
",,"In this example, attempting to call the first add method results in an error, as it has been overwritten by the second method."
Inheritance,"// Super Class
class Animal {
    protected String name;

    public Animal(String name) {
        this.name = name;
    }

    public void speak() {
        // Some default implementation
    }
}

// Sub Class 
class Dog extends Animal {
    public Dog(String name) {
        super(name);
    }

    @Override
    public void speak() {
        System.out.println(""Woof!"");
    }
}


// Sub Class 
class Cat extends Animal {
    public Cat(String name) {
        super(name);
    }

    @Override
    public void speak() {
        System.out.println(""Meow!"");
    }
}

// Usage
Dog dog = new Dog(""Buddy"");
Cat cat = new Cat(""Whiskers"");

System.out.println(dog.name);   // Output: Buddy
dog.speak();                     // Output: Woof!

System.out.println(cat.name);   // Output: Whiskers
cat.speak();                     // Output: Meow!
","# Super Class
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        pass

# Sub Class
class Dog(Animal):
    def speak(self):
        return ""Woof!""

# Sub Class
class Cat(Animal):
    def speak(self):
        return ""Meow!""

# Usage
dog = Dog(""Buddy"")
cat = Cat(""Whiskers"")

print(dog.name)       # Output: Buddy
print(dog.speak())    # Output: Woof!

print(cat.name)       # Output: Whiskers
print(cat.speak())    # Output: Meow!",,"You can add the `init__()` function to the subclass constructor to  overrides the inheritance of the super's __init__() function.

The `super` function can then be used to make the child class inherit all the methods and properties from its parent, just like in java. 

```
# Equivalent
class Dog(Animal):
    def __init__(self, name):
        super().__init__(name)
```"
Import Statements,"// Java
import com.example.mypackage.Module1;
import com.example.mypackage.subpackage.Module3;
","# Python
from my_package import module1
from my_package.subpackage import module3
",,