topic,java,python,javaNote,pythonNote
Initialization,"List<Integer> myList = new ArrayList<>(List.of(5, 2, 8, 1, 6));
","my_list = [5, 2, 8, 1, 6]",,
Initialization (Empty),"List<Integer> myList = new ArrayList<>();


",my_list = [0]*4,,
List Comprehension,"
List<Integer> myList = new ArrayList<>();
for (int i = 1; i < 6; i++) {
    if (i % 2 == 0) {
        myList.add(2*i);
    }
}","my_list = [2*x for x in range(1, 6) if x % 2 == 0]",,The `if` statement may be omitted.
Accessing Elements,"List<Integer> myList = new ArrayList<>(List.of(5, 2, 8, 1, 6));
Integer element = myList.get(2); // Evaluates to 8
","my_list = [5, 2, 8, 1, 6]
element = my_list[2] // Evaluates to 8
",,
List Slicing,"List<Integer> myList = new ArrayList<>(List.of(5, 2, 8, 1, 6));
List<Integer> subList = myList.subList(0, 3); // Evaluates to [5, 2, 8]","my_list = [5, 2, 8, 1, 6]
sub_list = my_list[:3] // Evaluates to [5, 2, 8]",,
List Size,"List<Integer> myList = new ArrayList<>(List.of(5, 2, 8, 1, 6));
int size = myList.size(); // Evaluates to 5
","my_list = [5, 2, 8, 1, 6]
length = len(my_list) // Evaluates to 5
",,
Modifying Lists,"List<Integer> myList = new ArrayList<>(List.of(5, 2, 8, 1, 6));
myList.add(9);               // Add
myList.addAll([3, 5]);     // Add another list
myList.add(2, 10);         // Add at index 2, shift other elements
myList.set(2, 10);          // Set index 2
myList.remove(Integer.valueOf(3));  // Remove by value
myList.remove(1);         // Remove by index

","my_list = [5, 2, 8, 1, 6]
my_list.append(6)        # Append
my_list.extend([6, 7]).  # Append another list
my_list.insert(2, 10)     # Insert at index 2, shift other elements
my_list[2] = 10             # Set index 2
my_list.remove(3)        # Remove by value
my_list.pop(1)              # Remove by index
",,
Sorting Lists,"// Sorting a list in ascending order
List<Integer> myList = new ArrayList<>(List.of(5, 2, 8, 1, 6));
Collections.sort(myList);
System.out.println(""Sorted List (Ascending): "" + myList);

// Sorting a list in descending order
Collections.sort(myList, Collections.reverseOrder());
System.out.println(""Sorted List (Descending): "" + myList);

// Sorting the original list in-place
myList.sort(null);
System.out.println(""Original List Sorted (Ascending): "" + myList);
","# Sorting a list in ascending order
my_list = [5, 2, 8, 1, 6]
sorted_list = sorted(my_list)
print(""Sorted List (Ascending):"", sorted_list)

# Sorting a list in descending order
reverse_sorted_list = sorted(my_list, reverse=True)
print(""Sorted List (Descending):"", reverse_sorted_list)

# Sorting the original list in-place
my_list.sort()
print(""Original List Sorted (Ascending):"", my_list)
",,
Reverse Lists,"List<Integer> myList = new ArrayList<>(List.of(5, 2, 8, 1, 6));
Collections.reverse(myList);
System.out.println(""Reversed List: "" + myList);

","my_list = [5, 2, 8, 1, 6]
my_list.reverse()
print(""Reversed List:"", my_list)
",,
Searching Lists,"List<Integer> myList = new ArrayList<>(List.of(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5));
int elementToSearch = 3;
int index = myList.indexOf(elementToSearch); // Evaluates to 0
","my_list = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
element_to_search = 3
index = my_list.index(element_to_search) # Evaluates to 0
",,
Sum and Max of Lists,"List<Integer> myList = new ArrayList<>(List.of(5, 2, 8, 1, 6));
Integer sumOfList = myList.stream().sum(); // Evaluates to 22
Integer maxElement = myList.stream().max(); // Evaluates to 8","my_list = [5, 2, 8, 1, 6]
sum_of_list = sum(my_list) // Evaluates to 22
max_element = max(my_list) // Evaluates to 8
",This example uses streams which was introduced in Java 8. Do not worry if you are not familiar with this syntax. ,