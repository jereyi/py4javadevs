question,javaSolution,pythonSolution
"Create a Car class with attributes make, model, and year.
Add a method start_engine that prints a message indicating the engine has started.
Create an instance of the class and call the start_engine method.
Add a new property, mileage, to the car.
Print the updated details.","public class Car {
    String make;
    String model;
    int year;
    int mileage;

    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    void startEngine() {
        System.out.println(""Engine started! Vroom, vroom!"");
    }

    public static void main(String[] args) {
        // Create an instance of the Car class
        Car car1 = new Car(""Toyota"", ""Camry"", 2022);

        // Call the startEngine method
        car1.startEngine();

        // Initialize existing 'mileage' property
        // Adding a new property is not possible in Java
        car1.mileage = 50000;

        // Print the updated details
        System.out.println(""Make: "" + car1.make);
        System.out.println(""Model: "" + car1.model);
        System.out.println(""Year: "" + car1.year);
        System.out.println(""Mileage: "" + car1.mileage);
    }
}","class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def start_engine(self):
        print(""Engine started! Vroom, vroom!"")

# Create an instance of the Car class
car1 = Car(""Toyota"", ""Camry"", 2022)

# Call the start_engine method
car1.start_engine()

# Add a new property, 'mileage', to the car
car1.mileage = 50000

# Print the updated details
print(""Make:"", car1.make)
print(""Model:"", car1.model)
print(""Year:"", car1.year)
print(""Mileage:"", car1.mileage)"
"Create a Student class with attributes name, age, and grade.
Add a method display_info to print the student's information.
Add a new property, grade_category, to the student.
Print the updated details.
Delete the grade_category property and verify error thrown when grade_category property accessed.","public class Student {
    String name;
    int age;
    String grade;
    String gradeCategory;

    public Student(String name, int age, String grade) {
        this.name = name;
        this.age = age;
        this.grade = grade;
    }

    void displayInfo() {
        System.out.println(""Name: "" + name);
        System.out.println(""Age: "" + age);
        System.out.println(""Grade: "" + grade);
    }

    public static void main(String[] args) {
        // Create an instance of the Student class
        Student student1 = new Student(""Bob"", 16, ""10th"");

        // Call the displayInfo method
        student1.displayInfo();

        // Initialize 'gradeCategory' property
        student1.gradeCategory = ""High Achiever"";

        // Print the updated details
        System.out.println(""\nUpdated Details:"");
        System.out.println(""Name: "" + student1.name);
        System.out.println(""Age: "" + student1.age);
        System.out.println(""Grade: "" + student1.grade);
        System.out.println(""Grade Category: "" + student1.gradeCategory);

        // Set the 'gradeCategory' property to null
        // Deleting properties is not possible in Java
        student1.gradeCategory = null;

        System.out.println(""Grade Category: "" + student1.gradeCategory); // prints null
    }
}
","class Student:
    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

    def display_info(self):
        print(""Name:"", self.name)
        print(""Age:"", self.age)
        print(""Grade:"", self.grade)

# Create an instance of the Student class
student1 = Student(""Bob"", 16, ""10th"")

# Call the display_info method
student1.display_info()

# Add a new property, 'grade_category', to the student
student1.grade_category = ""High Achiever""

# Print the updated details
print(""\nUpdated Details:"")
print(""Name:"", student1.name)
print(""Age:"", student1.age)
print(""Grade:"", student1.grade)
print(""Grade Category:"", student1.grade_category)

# Delete the 'grade_category' property
del student1.grade_category

print(""Grade Category:"", student1.grade_category) # throws error"
"Define a Node class with attributes data and next_node.
Create a LinkedList class with an initial empty head.
Implement the is_empty method to check if the linked list is empty.
Implement the insert_at_end method to insert a new node at the end of the linked list.
Implement the display method to print the elements of the linked list.
Implement the length method to find and return the length of the linked list.
Create an instance of the LinkedList class and perform the following operations:
Insert elements 5, 10, 15, and 20 at the end of the linked list.
Display the elements of the linked list.
Print the length of the linked list.","class Node {
    int data;
    Node nextNode;

    Node(int data) {
        this.data = data;
        this.nextNode = null;
    }
}

class LinkedList {
    Node head;

    LinkedList() {
        this.head = null;
    }

    boolean isEmpty() {
        return head == null;
    }

    void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
        } else {
            Node current = head;
            while (current.nextNode != null) {
                current = current.nextNode;
            }
            current.nextNode = newNode;
        }
    }

    void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + "" -> "");
            current = current.nextNode;
        }
        System.out.println(""null"");
    }

    int length() {
        int count = 0;
        Node current = head;
        while (current != null) {
            count++;
            current = current.nextNode;
        }
        return count;
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();

        linkedList.insertAtEnd(5);
        linkedList.insertAtEnd(10);
        linkedList.insertAtEnd(15);
        linkedList.insertAtEnd(20);

        System.out.println(""Linked List:"");
        linkedList.display();

        System.out.println(""Length of the Linked List: "" + linkedList.length());
    }
}","class Node:
    def __init__(self, data):
        self.data = data
        self.next_node = None


class LinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def insert_at_end(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
        else:
            current = self.head
            while current.next_node:
                current = current.next_node
            current.next_node = new_node

    def display(self):
        current = self.head
        while current:
            print(current.data, end="" -> "")
            current = current.next_node
        print(""None"")

    def length(self):
        count = 0
        current = self.head
        while current:
            count += 1
            current = current.next_node
        return count


# Test the Linked List class
linked_list = LinkedList()

linked_list.insert_at_end(5)
linked_list.insert_at_end(10)
linked_list.insert_at_end(15)
linked_list.insert_at_end(20)

print(""Linked List:"")
linked_list.display()

print(""Length of the Linked List:"", linked_list.length())"